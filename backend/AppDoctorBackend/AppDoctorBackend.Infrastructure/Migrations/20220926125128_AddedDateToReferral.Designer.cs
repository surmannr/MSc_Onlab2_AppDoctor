// <auto-generated />
using System;
using AppDoctorBackend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDoctorBackend.Infrastructure.Migrations
{
    [DbContext(typeof(AppDoctorDbContext))]
    [Migration("20220926125128_AddedDateToReferral")]
    partial class AddedDateToReferral
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.ExaminationReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientProblem")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("ExaminationReservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c14115a-62d1-4499-a464-d7d1dd2ea1ea"),
                            DateFrom = new DateTime(2022, 10, 3, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(4863),
                            DateTo = new DateTime(2022, 10, 3, 16, 51, 27, 960, DateTimeKind.Local).AddTicks(4873),
                            DoctorId = "user1",
                            IsAccepted = true,
                            IsDeleted = false,
                            IsResolved = false,
                            PatientId = "user4",
                            PatientProblem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vulputate nunc eget erat venenatis, non lobortis arcu lacinia. Suspendisse faucibus sagittis magna, in rhoncus eros ultrices eget. Nullam vitae nulla eu lorem tempus placerat."
                        },
                        new
                        {
                            Id = new Guid("af378505-14cb-4f49-1111-ba2c8fdef77d"),
                            DateFrom = new DateTime(2022, 9, 21, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(4889),
                            DateTo = new DateTime(2022, 9, 21, 17, 51, 27, 960, DateTimeKind.Local).AddTicks(4891),
                            DoctorId = "user2",
                            IsAccepted = true,
                            IsDeleted = false,
                            IsResolved = true,
                            PatientId = "user8",
                            PatientProblem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vulputate nunc eget erat venenatis, non lobortis arcu lacinia. Suspendisse faucibus sagittis magna, in rhoncus eros ultrices eget. Nullam vitae nulla eu lorem tempus placerat."
                        },
                        new
                        {
                            Id = new Guid("384c9953-4047-481d-a0b9-c70a30c5b491"),
                            DateFrom = new DateTime(2022, 10, 10, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(4894),
                            DateTo = new DateTime(2022, 10, 10, 15, 51, 27, 960, DateTimeKind.Local).AddTicks(4896),
                            DoctorId = "user1",
                            IsAccepted = false,
                            IsDeleted = false,
                            IsResolved = false,
                            PatientId = "user6",
                            PatientProblem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vulputate nunc eget erat venenatis, non lobortis arcu lacinia. Suspendisse faucibus sagittis magna, in rhoncus eros ultrices eget. Nullam vitae nulla eu lorem tempus placerat."
                        });
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiseasesGoodFor")
                        .HasColumnType("int");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiseasesGoodFor = 200,
                            InStock = 300,
                            IsDeleted = false,
                            Name = "ALPHAMUNO"
                        },
                        new
                        {
                            Id = 2,
                            DiseasesGoodFor = 65568,
                            InStock = 230,
                            IsDeleted = false,
                            Name = "BETATEMO"
                        },
                        new
                        {
                            Id = 3,
                            DiseasesGoodFor = 0,
                            InStock = 255,
                            IsDeleted = false,
                            Name = "GAMMADIN"
                        },
                        new
                        {
                            Id = 4,
                            DiseasesGoodFor = 40962,
                            InStock = 320,
                            IsDeleted = false,
                            Name = "DELTATOM"
                        },
                        new
                        {
                            Id = 5,
                            DiseasesGoodFor = 131073,
                            InStock = 265,
                            IsDeleted = false,
                            Name = "EPSICOMMA"
                        },
                        new
                        {
                            Id = 6,
                            DiseasesGoodFor = 262144,
                            InStock = 294,
                            IsDeleted = false,
                            Name = "ZETARA"
                        },
                        new
                        {
                            Id = 7,
                            DiseasesGoodFor = 294913,
                            InStock = 300,
                            IsDeleted = false,
                            Name = "XEMORPH"
                        },
                        new
                        {
                            Id = 8,
                            DiseasesGoodFor = 128,
                            InStock = 230,
                            IsDeleted = false,
                            Name = "IKSZEM"
                        },
                        new
                        {
                            Id = 9,
                            DiseasesGoodFor = 256,
                            InStock = 255,
                            IsDeleted = false,
                            Name = "GIMMADON"
                        },
                        new
                        {
                            Id = 10,
                            DiseasesGoodFor = 20496,
                            InStock = 320,
                            IsDeleted = false,
                            Name = "REMADDIN"
                        },
                        new
                        {
                            Id = 11,
                            DiseasesGoodFor = 2560,
                            InStock = 265,
                            IsDeleted = false,
                            Name = "LUMPA"
                        },
                        new
                        {
                            Id = 12,
                            DiseasesGoodFor = 1024,
                            InStock = 294,
                            IsDeleted = false,
                            Name = "JOTIRSO"
                        });
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.Receipt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Receipts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a08aa1f-1b57-417f-8be5-4cc22576c0fc"),
                            Date = new DateTime(2022, 10, 3, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(5074),
                            DoctorId = "user1",
                            IsDeleted = false,
                            PatientId = "user4"
                        },
                        new
                        {
                            Id = new Guid("4ed81b96-cec6-417b-93c3-396f73624835"),
                            Date = new DateTime(2022, 9, 29, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(5079),
                            DoctorId = "user2",
                            IsDeleted = false,
                            PatientId = "user8"
                        },
                        new
                        {
                            Id = new Guid("2141e417-4a7a-4620-be37-3e6f354d9187"),
                            Date = new DateTime(2022, 9, 16, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(5081),
                            DoctorId = "user1",
                            IsDeleted = false,
                            PatientId = "user5"
                        });
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.ReceiptMedicine", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ReceiptId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("ReceiptMedicines");

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("4a08aa1f-1b57-417f-8be5-4cc22576c0fc"),
                            MedicineId = 10,
                            IsDeleted = false,
                            Quantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("4a08aa1f-1b57-417f-8be5-4cc22576c0fc"),
                            MedicineId = 5,
                            IsDeleted = false,
                            Quantity = 1
                        },
                        new
                        {
                            ReceiptId = new Guid("4ed81b96-cec6-417b-93c3-396f73624835"),
                            MedicineId = 1,
                            IsDeleted = false,
                            Quantity = 3
                        },
                        new
                        {
                            ReceiptId = new Guid("4ed81b96-cec6-417b-93c3-396f73624835"),
                            MedicineId = 3,
                            IsDeleted = false,
                            Quantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("4ed81b96-cec6-417b-93c3-396f73624835"),
                            MedicineId = 5,
                            IsDeleted = false,
                            Quantity = 1
                        },
                        new
                        {
                            ReceiptId = new Guid("2141e417-4a7a-4620-be37-3e6f354d9187"),
                            MedicineId = 8,
                            IsDeleted = false,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.Referral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnoses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExaminationReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExaminationReservationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Referrals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a46e1c84-8056-4c5e-a1ee-124eaadd193d"),
                            Diagnoses = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vulputate nunc eget erat venenatis, non lobortis arcu lacinia. Suspendisse faucibus sagittis magna, in rhoncus eros ultrices eget. Nullam vitae nulla eu lorem tempus placerat.",
                            DoctorId = "user2",
                            ExaminationDate = new DateTime(2022, 10, 2, 14, 51, 27, 960, DateTimeKind.Local).AddTicks(4980),
                            ExaminationReservationId = new Guid("af378505-14cb-4f49-1111-ba2c8fdef77d"),
                            IsDeleted = false,
                            PatientId = "user8"
                        });
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NamePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            Address = "Budapest I. utca",
                            BirthDate = new DateTime(1997, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5264),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Adam",
                            IsDeleted = false,
                            LastName = "Parker",
                            LockoutEnabled = false,
                            NamePrefix = "Dr",
                            NormalizedUserName = "SSTRAHAN0",
                            PasswordHash = "AQAAAAEAACcQAAAAEDrXziN1OLKNZrNRmkbR+cLINVAThwJM0JUNCTSbxAskJw+Hl7aJwbLvAu7+mJPq0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "sstrahan0"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            Address = "Budapest I. utca",
                            BirthDate = new DateTime(1995, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5309),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Hollow",
                            LockoutEnabled = false,
                            NamePrefix = "Dr",
                            NormalizedUserName = "LTIPPIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEJaY7jR1pa6HWpXmQrtBc1oqx+/Hilwb5W6+PtRBEIFT0RoTncqi1TnY1KG86T0yHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "ltippin1"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            Address = "Budapest I. utca",
                            BirthDate = new DateTime(2000, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5319),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Kate",
                            IsDeleted = false,
                            LastName = "Middleton",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "BLYPTRATT2",
                            PasswordHash = "AQAAAAEAACcQAAAAEANK4WlRXv4iQPHHiggx/VTVGHpIvpEu3hsxPtvHYHuno4LpDdSWkfdy5HDlIsbpUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "blyptratt2"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            Address = "Budapest VI. utca",
                            BirthDate = new DateTime(1967, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5328),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Gloria",
                            IsDeleted = false,
                            LastName = "Namade",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "JMELIOR3",
                            PasswordHash = "AQAAAAEAACcQAAAAEDYIkKQv5igl8FtbvtJ96upUn0doNsW99Td5RskJ2/0U4etPoynj0rFv1ubJ93jvTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "jmelior3"
                        },
                        new
                        {
                            Id = "user5",
                            AccessFailedCount = 0,
                            Address = "Budapest II. utca",
                            BirthDate = new DateTime(1989, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5336),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Blake",
                            IsDeleted = false,
                            LastName = "Riverdome",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "TMAXWORTHY4",
                            PasswordHash = "AQAAAAEAACcQAAAAEPwmHbWay48IB2x7yknX3xS2G1QWqGQR1C8g0fm0oOExaO5R6WnPunvkbJBEAe9Qbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "tmaxworthy4"
                        },
                        new
                        {
                            Id = "user6",
                            AccessFailedCount = 0,
                            Address = "Budapest XI. utca",
                            BirthDate = new DateTime(2000, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5373),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Olivia",
                            IsDeleted = false,
                            LastName = "Woodburry",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "HCHEVERELL5",
                            PasswordHash = "AQAAAAEAACcQAAAAEHerT1Z7aii5rU2AlMxVs5RdS7hZDu7M59Oyy5lkEdlXkZU6OxoOwZjNV7YwQwirQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "hcheverell5"
                        },
                        new
                        {
                            Id = "user7",
                            AccessFailedCount = 0,
                            Address = "Budapest V. utca",
                            BirthDate = new DateTime(1993, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5382),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Carl",
                            IsDeleted = false,
                            LastName = "Scottom",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "GBOSKELL6",
                            PasswordHash = "AQAAAAEAACcQAAAAEMWjVZsBxGFWZ8JScx4ZjOOjUMUnxckLaunKVDBjweYmhY/s0gr7IXfYjjiSywKiug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "gboskell6"
                        },
                        new
                        {
                            Id = "user8",
                            AccessFailedCount = 0,
                            Address = "Budapest VII. utca",
                            BirthDate = new DateTime(1995, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5389),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Ariel",
                            IsDeleted = false,
                            LastName = "Summer",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "ERYLETT7",
                            PasswordHash = "AQAAAAEAACcQAAAAEKir1y0cC6WUuwjgSrpfUh+KsrDore7EVHOEotYWLrWBckyrW0cPMhHa/sgGSQu4qQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "erylett7"
                        },
                        new
                        {
                            Id = "user9",
                            AccessFailedCount = 0,
                            Address = "Budapest III. utca",
                            BirthDate = new DateTime(1996, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5398),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Sophie",
                            IsDeleted = false,
                            LastName = "Mundara",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "KSEELY8",
                            PasswordHash = "AQAAAAEAACcQAAAAEPElEHruOsNZYlyxmvwIKIPGmEJ9l0iC0zQqpQzUN1MNmuIbjRaVI40oOurqeUdn+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "kseely8"
                        },
                        new
                        {
                            Id = "user10",
                            AccessFailedCount = 0,
                            Address = "Budapest I. utca",
                            BirthDate = new DateTime(1993, 9, 26, 14, 51, 27, 949, DateTimeKind.Local).AddTicks(5406),
                            ConcurrencyStamp = "cfc830af-302f-44b7-a973-805e6439b2ad",
                            EmailConfirmed = true,
                            FirstName = "Jill",
                            IsDeleted = false,
                            LastName = "Muze",
                            LockoutEnabled = false,
                            NamePrefix = "",
                            NormalizedUserName = "HFILINKOV9",
                            PasswordHash = "AQAAAAEAACcQAAAAEKTKMu1k+JYwFhJshVR+Fzml6xZ6/RIJj1R2DBA/+9jx3kUZVtNZ1eGBBjIwBmbbPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "RD6YLKPIHDS7MMSLGQ3O7DF5ZNR73XJ2",
                            TwoFactorEnabled = false,
                            UserName = "hfilinkov9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "Páciens",
                            ConcurrencyStamp = "5af48b90-1579-49da-b6da-e2fd3a313b7d",
                            Name = "Páciens",
                            NormalizedName = "PÁCIENS"
                        },
                        new
                        {
                            Id = "Doktor",
                            ConcurrencyStamp = "6cc98a1b-384c-46eb-a544-fb7020a6ad22",
                            Name = "Doktor",
                            NormalizedName = "DOKTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "user1",
                            RoleId = "Doktor"
                        },
                        new
                        {
                            UserId = "user2",
                            RoleId = "Doktor"
                        },
                        new
                        {
                            UserId = "user3",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user4",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user5",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user6",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user7",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user8",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user9",
                            RoleId = "Páciens"
                        },
                        new
                        {
                            UserId = "user10",
                            RoleId = "Páciens"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.ExaminationReservation", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", "Doctor")
                        .WithMany("DoctorsExaminationReservations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", "Patient")
                        .WithMany("PatientsExaminationReservations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.Receipt", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", "Doctor")
                        .WithMany("DoctorsReceipts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", "Patient")
                        .WithMany("PatientsReceipts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.ReceiptMedicine", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.Receipt", "Receipt")
                        .WithMany("ReceiptMedicines")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.Referral", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", "Doctor")
                        .WithMany("DoctorsReferrals")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.ExaminationReservation", "ExaminationReservation")
                        .WithMany()
                        .HasForeignKey("ExaminationReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", "Patient")
                        .WithMany("PatientsReferrals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("ExaminationReservation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppDoctorBackend.Infrastructure.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.Receipt", b =>
                {
                    b.Navigation("ReceiptMedicines");
                });

            modelBuilder.Entity("AppDoctorBackend.Infrastructure.DomainModels.User", b =>
                {
                    b.Navigation("DoctorsExaminationReservations");

                    b.Navigation("DoctorsReceipts");

                    b.Navigation("DoctorsReferrals");

                    b.Navigation("PatientsExaminationReservations");

                    b.Navigation("PatientsReceipts");

                    b.Navigation("PatientsReferrals");
                });
#pragma warning restore 612, 618
        }
    }
}
